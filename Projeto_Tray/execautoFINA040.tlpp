#INCLUDE "TOTVS.ch"
#INCLUDE "TbiConn.ch"
#INCLUDE "TOPCONN.CH"
#INCLUDE 'tlpp-core.th'

//https://devforum.totvs.com.br/3604-execauto-fina090

/*/{Protheus.doc} xExFINA040
Função que realiza o execauto do FINA040 geraçãp de AB-.
@type function
@author Joao Gomes
@since 25/11/2024 - Ultima atualização
@param _aTitulo, Array, Dados do titulo
@param _nOpt, Numeric, opcao: 3 - Inclusao, 4 - Alteração, 5 - Exclusão
@return Array, aRet, Retorna True e mensagem de sucesso se a rotina concluir com sucesso ou Falso e mensagem de problema em caso de falha.
/*/
User Function xExFINA040(aLista)

	//Local aArea := FWGetArea() as array
	Local aCabecalho := {} as array
	Local lRet
	Local cQry
	Local nY as numeric
	Local aLog := {} as array
	Local cErro as character
	Local cNatureza := SuperGetMV('MV_XNATTXR',.F.,"504")
	Local cHistorico := "MDR Taxa de repasse REDE"
	Local cTipo := "AB-"
	Local cLA := "S"
	Local cFluxo := "S"
	Local _nOpt := 3
	Local i := 1
	Local j := 1
	Local oResp1
	Local oResp2
	Local oResp3
	Local aResp4
	Local oClasseRedeItau := ClassesRedeItau.ClRedeItau():New()
	Local cNSU  := AllTrim(aLista[1])
	Local cDataDe
	Local cDataAte
	Local aMDR := {}
	Private lMsHelpAuto     := .T.
	Private lMsErroAuto     := .F.
	Private lAutoErrNoFile     := .T.

	//RpcSetEnv("03","03")

	cQry:= 	"SELECT SC5.C5_NOTA, SC5.C5_CONDPAG, SC5.C5_XORIGEM, SC5.C5_NUM, SC5.C5_EMISSAO, " + CRLF
	cQry+=  "SE1.E1_FILIAL, SE1.E1_PREFIXO, SE1.E1_NUM, SE1.E1_PARCELA, SE1.E1_TIPO" + CRLF
	cQry+=	"FROM " + RetSqlName("SC5") + " SC5  INNER JOIN " + RetSqlName("SE1") + " SE1" + CRLF
	cQry+=	"ON SC5.C5_NOTA = E1_NUM" + CRLF
	cQry+=	"WHERE SC5.C5_NUM = '" + aLista[2] + "'" + CRLF
	cQry+= 	"AND SE1.E1_TIPO = 'NF' " + CRLF
	cQry+=	"AND SE1.D_E_L_E_T_ = ''" + CRLF
	cQry+=	"AND SC5.D_E_L_E_T_ = ''"

	If Select("CQRY") <> 0
		DbSelectArea("CQRY")
		DbCloseArea()
	EndIf

	TCQuery cQry New Alias "CQRY"

	cDataDe := FormatDt(aLista[4])
	cDataAte := FormatDt(aLista[5])

	oResp1 := oClasseRedeItau:getParcela(cNSU, cDataDe, cDataAte) // datas para a verificação
	oResp2 := oResp1:getJsonObject('Json')
	oResp3 := oResp2:getJsonObject('content')
	aResp4 := oResp3:getJsonObject('installments')

	While i<=Len(aResp4)
		if aResp4[i]['nsu'] == Val(cNSU)
			aadd(aMDR,{aResp4[i]['installmentNumber'], aResp4[i]['mdrAmount'], aResp4[i]['expirationDate'], aResp4[i]['nsu'] })
		endif
		i++
	End

	If Len(aMDR) > 0 //Valida se recebeu alguma informação da REDE
		aSort(aMDR, , , {|x, y| x[1] < y[1]})

		while cQry->(!Eof())
			DbSelectArea("SE1")
			SE1->(DbSetOrder(1))
			If SE1->(DbSeek(CQRY->E1_FILIAL + CQRY->E1_PREFIXO + CQRY->E1_NUM + CQRY->E1_PARCELA + CQRY->E1_TIPO))

				If RecLock('SE1',.F.)
					SE1->E1_XVLRTXA := aMDR[j][2]
					//SE1->E1_VENCTO := StoD(aMDR[j][3])
					SE1->E1_DOCTEF := cValToChar(aMDR[j][4])
					SE1->E1_XORIGEM := "TRAY"
					SE1->(MsUnlock())
				EndIf

				aAdd(aCabecalho, {"E1_FILIAL",  SE1->E1_FILIAL,     Nil})
				aAdd(aCabecalho, {"E1_NUM",    	SE1->E1_NUM,        Nil}) // numero da nota
				aAdd(aCabecalho, {"E1_PREFIXO", SE1->E1_PREFIXO,    Nil}) // mesmo do titulo original
				aAdd(aCabecalho, {"E1_PARCELA", SE1->E1_PARCELA,    Nil}) // mesmo do titulo original
				aAdd(aCabecalho, {"E1_TIPO",    cTipo,              Nil}) // AB-
				aAdd(aCabecalho, {"E1_NATUREZ", cNatureza,          Nil}) // Especifica, gerson deve passar
				aAdd(aCabecalho, {"E1_CLIENTE", SE1->E1_CLIENTE,   	Nil}) // mesmo do titulo original
				aAdd(aCabecalho, {"E1_LOJA",    SE1->E1_LOJA,		Nil}) // 01
				aAdd(aCabecalho, {"E1_NOMCLI",  SE1->E1_NOMCLI,    	Nil}) // Nome do Cliente
				aAdd(aCabecalho, {"E1_EMISSAO", SE1->E1_EMISSAO,   	Nil}) // Data de Emissao
				aAdd(aCabecalho, {"E1_VENCTO",  SE1->E1_VENCTO,    	Nil}) // Data de Vencimento
				aAdd(aCabecalho, {"E1_VENCREA", SE1->E1_VENCREA,   	Nil}) // Data de Vencimento real
				aAdd(aCabecalho, {"E1_VALOR",  	aMDR[j][1],         Nil}) // Pega da API a taxa MDR da parcela
				aAdd(aCabecalho, {"E1_VALJUR",  SE1->E1_VALJUR,    	Nil}) // Taxa de permanencia diaria }Verificar se precisa mesmo
				aAdd(aCabecalho, {"E1_PORCJUR", SE1->E1_PORCJUR,   	Nil}) // Porcentual de juros diario }Verificar se precisa mesmo
				aAdd(aCabecalho, {"E1_HIST",    cHistorico,         Nil}) // "MDR Taxa de repasse REDE"
				aAdd(aCabecalho, {"E1_MOEDA",   SE1->E1_MOEDA,     	Nil}) // Moeda do titulo - REAL
				aAdd(aCabecalho, {"E1_PEDIDO",  SE1->E1_PEDIDO,    	Nil}) // Numero do pedido
				aAdd(aCabecalho, {"E1_VEND1",   SE1->E1_VEND1,     	Nil}) // Vendedo - padrao: 000028
				aAdd(aCabecalho, {"E1_XORIGEM",	SE1->E1_XORIGEM,   	Nil}) // Origem - Tray
				aAdd(aCabecalho, {"E1_LA",      cLA,				Nil}) // Preencher 'S'
				aAdd(aCabecalho, {"E1_SITUACA", SE1->E1_SITUACA,   	Nil}) // Situação do titulo
				aAdd(aCabecalho, {"E1_EMIS1",   SE1->E1_EMIS1,     	Nil}) // Data Contabilização
				aAdd(aCabecalho, {"E1_VENCORI", SE1->E1_VENCORI,   	Nil}) // Vencimento original
				aAdd(aCabecalho, {"E1_VLRREAL", SE1->E1_VLRREAL,   	Nil}) // Valor real
				aAdd(aCabecalho, {"E1_STATUS",  SE1->E1_STATUS,    	Nil}) // Status atual
				aAdd(aCabecalho, {"E1_ORIGEM",  SE1->E1_ORIGEM,    	Nil}) // Origem
				aAdd(aCabecalho, {"E1_FLUXO",   cFluxo, 	    	Nil}) // Fluxo de caixa
				aAdd(aCabecalho, {"E1_TIPODES", SE1->E1_TIPODES,   	Nil}) // Tipo de desconto
				aAdd(aCabecalho, {"E1_FILORIG", SE1->E1_FILORIG,   	Nil}) // Filial de origem
				aAdd(aCabecalho, {"E1_XMAGATU", SE1->E1_XMAGATU,   	Nil})
				aAdd(aCabecalho, {"E1_XDOCSIT", SE1->E1_XDOCSIT,   	Nil})
				aAdd(aCabecalho, {"E1_XVLRTXA", SE1->E1_XVLRTXA,   	Nil})
				aAdd(aCabecalho, {"E1_XVLRFRE", SE1->E1_XVLRFRE,   	Nil})
				aAdd(aCabecalho, {"E1_XNF",     SE1->E1_XNF,       	Nil})

				Begin Transaction

					//Chama a rotina automática
					aLog :={}
					nY := 0
					cErro := ""
					lMsErroAuto := .F.
					lRet := MSExecAuto({|x,y| FINA040(x,y)}, aCabecalho, _nOpt)

					If lMsErroAuto
						//MostraErro()
						aLog := GetAutoGRLog()
						For nY := 1 To Len(aLog)
							If !Empty(cErro)
								cErro += CRLF
							EndIf
							cErro += aLog[nY]
							FWLogMsg("INFO", /*cTransactionId*/, "Financeiro", "Execauto FINA040", /*cStep*/, /*cMsgId*/, "Falha ao incluir AB- para a nota: " + SE1->E1_NUM + " parcela: " + SE1->E1_PARCELA + cErro, /*nMensure*/, /*nElapseTime*/, /*aMessage*/)
						Next nY
						DisarmTransaction()
					else

						FWLogMsg("INFO", /*cTransactionId*/, "Financeiro", "Execauto FINA040", /*cStep*/, /*cMsgId*/, "Sucesso ao incluir AB- para a nota: " + SE1->E1_NUM + " parcela: " + SE1->E1_PARCELA, /*nMensure*/, /*nElapseTime*/, /*aMessage*/)
					endif
				End Transaction
			EndIf
			cQry->(DBSkip())
			aSize(aCabecalho,0)
			j++
		End
	endif

return lMsErroAuto


/*/{Protheus.doc} FormatDt
Formata data para integracao no fretefy/Itau
@type function
@author Giulliano Pinheiro
@since 15/05/2024
@param dData, character, data para formatar
@return character, data formatada
/*/
Static Function FormatDt(cData)

	Local cRetData  := ""

	cRetData := substr(cData,1,4)+'-'+substr(cData,5,2)+'-'+substr(cData,7,2)

Return(cRetData)
